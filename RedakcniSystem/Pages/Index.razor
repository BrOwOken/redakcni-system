@using RedakcniSystem.Data;
@page "/"
@inject ArticleService articleService
@inject NavigationManager nav
@inject UsersService us
@inject MenuService  menuService

<h2 class="mb-4">Articles</h2>
<div class="d-flex align-items-start">
    <div class="col-2" role="tablist" aria-orientation="vertical">
        <div class="list-group">
            @foreach (var item in menuItems)
            {
                <a class="list-group-item list-group-item-action" data-bs-toggle="pill" href="@item.Link" role="tab" aria-controls="v-pills-settings" aria-selected="false">@item.Name</a>
            }
        </div>
        
    </div>
    <div class="col-10">
        <div class="card-columns">
            @foreach (var article in articles)
            {
                <div class="card">
                    <img class="card-img-top" src="@article.ImageUrl" alt="Article image">
                    <div class="card-body">
                        <h5 class="card-title">@article.Title</h5>
                        <p class="card-text">@article.Content.Substring(0, 200)...</p>
                        <button @onclick="(e) => { ViewArticle(article.Id); }" class="btn btn-primary">View</button>
                        <AuthorizeView Roles="admin, redactor">
                            <Authorized>
                                <button class="btn btn-dark" @onclick="(e) => { EditArticle(article.Id); }">Edit</button>
                            </Authorized>
                        </AuthorizeView>
                        <AuthorizeView Roles="admin">
                            <Authorized>
                                <button class="btn btn-danger" @onclick="(e) => { DeleteArticle(article.Id); }">Delete</button>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </div>
            }
        </div>
    </div>
</div>



@code {
    List<Article> articles = new List<Article>();
    List<MenuItem> menuItems = new List<MenuItem>();

    protected override void OnInitialized()
    {
        articles = articleService.GetArticles();
        if (menuService.GetMenu() != null)
            menuItems = menuService.GetMenu();
        else
            menuItems = new List<MenuItem>();
    }
    private EventCallback ViewArticle(int id)
    {
        nav.NavigateTo($"article/{id}");
        return new EventCallback();
    }
    public EventCallback DeleteArticle(int id)
    {
        articleService.DeleteArticle(id);
        this.StateHasChanged();
        return new EventCallback();
    }
    public EventCallback EditArticle(int id)
    {
        nav.NavigateTo($"edit/{id}");
        return new EventCallback();
    }
}